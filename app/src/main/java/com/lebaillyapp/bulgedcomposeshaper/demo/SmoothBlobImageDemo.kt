package com.lebaillyapp.bulgedcomposeshaper.demo

import androidx.compose.animation.core.*
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.geometry.Size
import androidx.compose.ui.graphics.*
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import com.lebaillyapp.bulgedcomposeshaper.bulgedShape.SmoothBlobShape
import kotlinx.coroutines.delay
import kotlin.math.PI
import kotlin.math.cos
import kotlin.math.sin


/**
 * Demo [Composable] that displays an [ImageBitmap] clipped into an organic
 * "blob" outline, generated by [SmoothBlobShape].
 *
 * ### Behavior
 * - The blob outline is built from `pointCount` radii arranged in a circle,
 *   then smoothed with a Catmull–Rom spline.
 * - Each radius is varied randomly once at composition using [randomFactor],
 *   producing unique blob shapes at every recomposition with a new key.
 * - The outline is scaled down by [marginFactor] to avoid touching the edges.
 *
 * ### Parameters
 * @param bitmap The [ImageBitmap] to display inside the blob shape.
 * @param modifier External [Modifier] for layout.
 * @param pointCount Number of control points forming the blob outline.
 *   - Higher = more complex contour.
 *   - Default = 8.
 * @param amplitude Relative range of radius variation around the circle.
 *   - E.g. `0.1f` → ±10% deformation.
 * @param marginFactor Factor ≤ 1f that shrinks the base radius so the blob
 *   does not hit the container’s edges.
 *   - Default = `0.85f`.
 * @param randomFactor Randomness weight applied to the offsets.
 *   - `0f` → perfect circle.
 *   - `1f` → full use of [amplitude].
 *   - Default = `0.5f`.
 *
 * ### Visual Effect
 * Produces a smooth, organic "blob" clipped image, similar to
 * modern abstract design elements (avatars, blobs, waves).
 *
 * ### Example
 * ```kotlin
 * SmoothBlobImageDemo(
 *     bitmap = myBitmap,
 *     pointCount = 10,
 *     amplitude = 0.15f,
 *     marginFactor = 0.8f,
 *     randomFactor = 0.7f
 * )
 * ```
 *
 * ### Notes
 * - Blob shape is static once composed. To animate, you can:
 *   - Recompose with a new random seed.
 *   - Or drive [radiiFractions] with [Animatable] / [InfiniteTransition].
 *
 * @see SmoothBlobShape
 */
@Composable
fun SmoothBlobImageDemo(
    bitmap: ImageBitmap,
    modifier: Modifier = Modifier,
    pointCount: Int = 8,
    amplitude: Float = 0.1f,
    marginFactor: Float = 0.85f,
    randomFactor: Float = 0.5f // contrôle la variation aléatoire
) {
    // offsets aléatoires pour chaque point (fixe, mais modulable)
    val randomOffsets = remember(pointCount) {
        List(pointCount) { kotlin.random.Random.nextFloat() }
    }

    // rayons relatifs pour chaque point
    val radiiFractions = List(pointCount) { i ->
        1f - amplitude / 2 + amplitude * randomOffsets[i] * randomFactor
    }

    val blobShape = remember(radiiFractions, marginFactor) {
        SmoothBlobShape(radiiFractions, marginFactor)
    }

    Box(
        modifier = modifier
            .clip(blobShape)
    ) {
        Image(
            bitmap = bitmap,
            contentDescription = null,
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )
    }
}